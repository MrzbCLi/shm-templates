{{ IF request.params.uid }}
{{ user = user.switch( request.params.uid ) }}
{{ END }}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <meta name="format-detection" content="telephone=no"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="MobileOptimized" content="176"/>
    <meta name="HandheldFriendly" content="True"/>
    <meta name="robots" content="noindex,nofollow"/>
    <title></title>
    <script src="https://telegram.org/js/telegram-web-app.js?1"></script>
    <style>
body {
    --bg-color: #fff; /* –ë–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
    font-family: sans-serif;
    background-color: var(--bg-color);
    color: var(--tg-theme-text-color, #222);
    font-size: 14px;
    margin: 0;
    padding: 0;
    color-scheme: var(--tg-color-scheme);
}

        .btn {
            font-size: 14px;
            padding: 10px 17px;
        }

        .btn-primary {
            background-color: var(--tg-theme-button-color, #50a8eb);
            color: var(--tg-theme-button-text-color, #fff);
            border: none;
        }

        .button-container {
            display: flex;
        }

        button {
            display: block;
            width: 100%;
            font-size: 14px;
            margin: 5px 0;
            padding: 12px 20px;
            border: none;
            border-radius: 10px;

  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
            color: var(--tg-theme-button-text-color, #ffffff);
            cursor: pointer;
        }

        button.remove {
            width: 40px;
            padding: 10px;
            margin-left: 10px;
            background-color: red;
        }

        .main-container {
            padding: 15px;
        }

        button[disabled] {
            opacity: 0.6;
            cursor: auto;
            pointer-events: none;
        }

        button.close_btn {
            /*position: fixed;*/
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 0;
            margin: 0;
            padding: 16px 20px;
            text-transform: uppercase;
        }
.pricetext[type="number"],
.pricetext[contenteditable] {
    display: block;
    box-sizing: border-box;
    font-size: 32px;
    font-weight: bold;
    width: 70%;
            color: var(--tg-theme-text-color, #222222);
  --tw-bg-opacity: 1;
 border: 1px solid rgb(17 24 39 / var(--tw-bg-opacity));
            background-color: var(--tg-theme-bg-color, #ffffff);
            border-radius: 10px;

    text-align: center;
    appearance: textfield; /* –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –≤ input –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ */
}

.pricetext::-webkit-inner-spin-button, 
.pricetext::-webkit-outer-spin-button {
    -webkit-appearance: none; 
    margin: 0; /* –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –≤ input */
}

        input[type="number"],
        .input[contenteditable] {
            display: block;
            box-sizing: border-box;
            font-size: 32px;
font-weight:bold;
            width: 70%;
            padding: 12px 20px;
            margin: 15px 0;
  --tw-bg-opacity: 1;
 border: 1px solid rgb(17 24 39 / var(--tw-bg-opacity));
            background-color: var(--tg-theme-bg-color, #ffffff);
            border-radius: 10px;
            color: var(--tg-theme-text-color, #222222);
            text-align: center;
        }

        input[type="number"]::-webkit-input-placeholder {
            color: var(--tg-theme-hint-color, #ccc);
            font-size: 24px;
            font-weight:normal;
        }

        input[type="number"]::-moz-placeholder {
            color: var(--tg-theme-hint-color, #ccc);
            font-size: 24px;
            font-weight:normal;
        }

        input[type="number"]:-ms-input-placeholder {
            color: var(--tg-theme-hint-color, #ccc);
            font-size: 24px;
            font-weight:normal;
        }

        .input[data-placeholder] {
            position: relative;
            font-size: 24px;
            font-weight:normal;
        }

        .input[data-placeholder]:empty:before {
            position: absolute;
            font-size: 24px;
            left: 0;
            right: 0;
            content: attr(data-placeholder);
            color: var(--tg-theme-hint-color, #ccc);
            padding: 0 20px;
            font-weight: normal;
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
            pointer-events: none;
            z-index: -1;
        }

        section {
            padding: 15px;
            text-align: center;
            background-color: var(--bg-color, #ffffff);
        }

        section .sect_row {
            margin: 10px 0;
        }

        section + section {
            padding: 0 15px 65px;
        }

        p {

        }

        .upload-btn-wrapper {
width: 90%;
            position: relative;
            display: inline-block;

        }

        .upload-btn {
background-color: green;
            display: inline-block;
            cursor: pointer;
        }

        .page {
            display: none; /* –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫—Ä—ã—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
        }
        .page.active {
            display: block; /* –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–Ω–∞ */
        }

        .instruction {
            text-align: left;
            font-size: 16px;
            margin-bottom: 10px;
        }

        .block {
            font-family: sans-serif;
            background-color: var(--tg-theme-bg-color, #fff);
            color: var(--tg-theme-text-color, #222);
            margin: 0;
            padding: 0;
            color-scheme: var(--tg-color-scheme);
            text-align: center;
            padding: 15px;
        }

    .instruction-list {
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
        padding: 10px;
        border-radius: 10px;
        list-style-type: none;
        color: white;
text-align: center;
margin-bottom: 10px;
           font-family: sans-serif;
            font-size: 24px;
    }

.instruction-list li {

margin-left: 0;
    padding-left: 0;

    }

        .copy-btn {
            color: white;
            text-decoration: none;
            cursor: pointer;
font-weight: 900;
font-family: sans-serif;
            font-size: 24px;
        }

        .notification {
display: none;
position: fixed;
           top: 10px;
            right: -20px;
            padding: 15px;
left: 0;

            width: 100%;
            font-size: 14px;
            border: none;
            border-radius: 0;
            background-color: #4CAF50;
            color: white;
        }
.text-gray-400 {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity));
font-size:20px;
}
.text-blue-500 {
  --tw-text-opacity: 1;
  color: rgb(59 130 246 / var(--tw-text-opacity));
}
.hover\:bg-green-400:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(74 222 128 / var(--tw-bg-opacity));
}
.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity));
}
        .circle-check {
            position: relative;
            width: 60px;
            height: 60px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4); /* –¢–µ–Ω—å –¥–ª—è –ø–∞—Ä—è—â–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ */
            border-radius: 50%;
            background-color: #00cc44; /* –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ */
            display: flex;
            justify-content: center;
            align-items: center;
        }
        svg {
            width: 40px;
            height: 40px;
        }
        path {
            stroke: #ffffff; /* –ë–µ–ª–∞—è –≥–∞–ª–æ—á–∫–∞ */
            stroke-width: 13;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-dasharray: 100; /* –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∏ */
            stroke-dashoffset: 100;
            animation: draw 2.5s ease forwards; /* –ê–Ω–∏–º–∞—Ü–∏—è –≥–∞–ª–æ—á–∫–∏ */
        }

        /* –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∏ –≥–∞–ª–æ—á–∫–∏ */
        @keyframes draw {
            to {
                stroke-dashoffset: 0; /* –ü—Ä–æ—Ä–∏—Å–æ–≤–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞ */
            }
        }
.modal-window {

  transform: translate(-0, 25%);
}
    </style>
</head>

<body class="" style="visibility: hidden;">

<div class="modal-window">
<div id="page1" class="page active">

<section class="main-container">
 <h2 style="background: linear-gradient(to right, black, red); 
           -webkit-background-clip: text; 
           color: transparent;">
    –û–ü–õ–ê–¢–ê –ü–û–î–ü–ò–°–ö–ò
</h2>

    <center><input
        type="number"
        step="0.01"
        min="1"
        class="input"
        value=""
        id="text_amount"
        placeholder="–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
        inputmode="numeric" \
        pattern="\d*"
        required
    /></center>

    <h4 class="text-gray-400" style="font-size:20px; text-align:center;">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h4>

    <div class="button-container" id='perevod'>
        <button onclick="checkAmountAndNavigate()">
<span style="font-size:22px; font-weight:bold;">üö•  –°–ë–ü</span>
</button>
</div>

{{ FOR item IN ref(pay.paysystems) }}
    <div class="button-container" id='{{ item.shm_url }}'>
        <button onclick="ShmPayApp.makePayment('{{ item.shm_url }}','{{ item.recurring }}');"><span style="font-size:22px; font-weight:bold;">{{ item.name }}</span></button>
        {{ IF item.recurring }}
        <button onclick="ShmPayApp.removePayment('{{ item.shm_url }}');" class="remove"><span style="font-size:22px; font-weight:bold;">–•</span></button>
        {{ END }}
    </div>
{{ END }}
</section>
</div>
</div>

<div id="page2" class="page">
<section class="main-container">

    <button onclick="navigateTo('page1')"> ‚á¶ –ù–∞–∑–∞–¥</button>

<button id="notification" class="notification">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω</button>
 
<div class="instruction" style="transform: translate(-0, 5%);">
<ol class="instruction-list">
    <span class="instruction-title">–ü–ï–†–ï–í–ï–î–ò–¢–ï</span>
<br>
    <span class="text-gray-400" style="font-size:18px; text-align:center;">—Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞</span>
<center><input
        type="number"
        step="0.01"
        min="1"
        class="pricetext"
        value=""
        id="price_text"
        placeholder=""
        inputmode="numeric" \
        pattern="\d*"
        required
        readonly
    /></center>
    <span class="text-gray-400" style="font-size:18px; text-align:center;">–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–°–ë–ü)</span>
<br>
 <span class="copy-btn" onclick="copyToClipboard('+7977777777')">
                    +7977777777 ;
                    <img src="https://img.icons8.com/?size=100&id=107453&format=png" width="36px" alt="copy">
                </span>
<br>
<img src="https://frankmedia.ru/wp-content/uploads/2024/06/215abdf3c0cc.png" style="margin-top:10px" width="100px" alt="Moneywhite" border="0">
<br>
<span class="text-gray-400" style="font-size:14px;">
                –ü–æ–ª—É—á–∞—Ç–µ–ª—å <span class="text-blue-500" style="font-weight:bold;font-size:16px;">–ü–∞–≤–ª–µ–Ω–∫–æ –ü.</span>
            </span>
 <hr class="mb-[1.5vh] mt-[1.5vh]">
<p style="font-size:15px;">–ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,<br>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ —Å–∫—Ä–∏–Ω</p>
<div class="upload-btn-wrapper">
    <button class="upload-btn" id="uploadButton"><span style="font-size:18px; ">üßæ –û–¢–ü–†–ê–í–ò–¢–¨</span></button>
<input type="file" id="fileInput" accept=".jpg,.jpeg,.png,.pdf" style="display:none;" />
</div>
</ol>
</div>
</div>

        <div id="PaymentSuccess" style="display: none; transform: translate(-0, 30%);">
<div class="modal-window">
<center>
            <h1 style="font-size:38px; text-align:center;">
                –£—Å–ø–µ—à–Ω–æ!
            </h1>
    <!-- –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ —Å –±–µ–ª–æ–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–∞–ª–æ—á–∫–æ–π -->
    <div class="circle-check">
        <svg viewBox="0 0 65 51" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M7 25L27.3077 44L58.5 7"></path>
        </svg>
    </div>
<br>
            <h2 class="text-gray-400" style="margin-top:10px; font-size:18px; text-align:center;">
                –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            </h2>
        </div></center>
    </div>

<script>
    function checkAmountAndNavigate() {
        var amount = parseFloat(document.getElementById('text_amount').value);
        
        if (isNaN(amount) || amount < 1) {
            Telegram.WebApp.showAlert("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ");
        } else {
            navigateTo('page2');
        }
    }

    // Navigate function as previously defined
    function navigateTo(pageId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(function(page) {
            page.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.getElementById(pageId).classList.add('active');
    }
</script>

    <script>
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                showNotification();
            }, function(err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
            });
        }

        function showNotification() {
            const notification = document.getElementById('notification');
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 2000);
        }
    </script>

</section>

<script>
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web App –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = Telegram.WebApp.initDataUnsafe.user.id;
    const chatId = Telegram.WebApp.initDataUnsafe.user.id;  // –¢–µ–∫—É—â–∏–π —á–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const botToken = '{{ config.telegram.token }}'; // –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    const adminChatId = '{{ config.telegram_admin.id }}';  // –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    // –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∏–Ω–ø—É—Ç —Ñ–∞–π–ª–∞
    const uploadButton = document.getElementById('uploadButton');
    const fileInput = document.getElementById('fileInput');

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    uploadButton.addEventListener('click', function () {
        fileInput.click();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', function () {
        const file = fileInput.files[0];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 2MB)
    if (file && file.size > 2 * 1024 * 1024) {
        Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 2MB.');
        return;
    }

        if (file) {
            const formData = new FormData();
            formData.append('document', file);
            formData.append('chat_id', chatId);  // –ü–µ—Ä–µ–¥–∞–µ–º ID —á–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            formData.append('caption', '\nÔø® –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\nÔø® –í—Ä–µ–º—è: {{ USE date }}
{{ d2 = date.format(date.now, '%d.%m.%Y %H:%M') }}
{{ d2 }}');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ Telegram API –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
            fetch(`https://api.telegram.org/bot${botToken}/sendDocument`, {
                method: 'POST',
                body: formData
            }).then(response => response.json())
              .then(result => {
                  if (result.ok) {
                      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.getElementById('page1').style.display = 'none';
    document.getElementById('page2').style.display = 'none';
    document.getElementById('PaymentSuccess').style.display = 'block';

                      // –í—ã–∑–æ–≤ callback_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                              chat_id: chatId,
                              text: `\nÔø® –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω.\nÔø® –ú—ã –í–∞—Å —É–≤–µ–¥–æ–º–∏–º`,
                              "reply_markup": {
                                  "inline_keyboard": [
                                      [{ "text": "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", "callback_data": `/start` }]
                                  ]
                              }
                          })
                      }).then(callbackResponse => callbackResponse.json())
                        .then(callbackResult => {
                            if (!callbackResult.ok) {
                                Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ callback data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + callbackResult.description);
                            }
                        }).catch(callbackError => {
                            Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ callback data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + callbackError.message);
                        });

                      // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                      const adminFormData = new FormData();
                      adminFormData.append('document', file);
                      adminFormData.append('chat_id', adminChatId);  // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                      adminFormData.append('caption', `\nÔø® –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç {{ user.full_name }} ID: {{ user.id }} \nÔø® –í—Ä–µ–º—è: {{ USE date }}
{{ d2 = date.format(date.now, '%d.%m.%Y %H:%M') }}
{{ d2 }}
`);

                      fetch(`https://api.telegram.org/bot${botToken}/sendDocument`, {
                          method: 'POST',
                          body: adminFormData
                      }).then(response => response.json())
                        .then(adminResult => {
                            if (adminResult.ok) {
                                console.log('–ö–≤–∏—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');

                                // –í—ã–∑–æ–≤ callback_data –¥–ª—è –±–æ—Ç–∞
                                fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        chat_id: adminChatId,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                        text: `#${chatId}#\nÔø® –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç {{ user.full_name }}\nÔø® –ß–∞—Ç id: {{ user.login }}\nÔø® –õ–æ–≥–∏–Ω: https://t.me/{{ user.settings.telegram.login }}\nÔø® ID –ö–ª–∏–µ–Ω—Ç–∞: {{ user.id }} `,
                                        "reply_markup": {
                                            "inline_keyboard": [
                                                [{ "text": "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "callback_data": `/admpay {{ user.id }} ` }],
                                                [{ "text": "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "callback_data": `/admusermsg #{{ args.0 }}# ` }]
                                            ]
                                        }
                                    })
                                }).then(callbackResponse => callbackResponse.json())
                                  .then(callbackResult => {
                                      if (callbackResult.ok) {
                                          console.log('Callback data —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–æ');
                                      } else {
                                          Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ callback data: ' + callbackResult.description);
                                      }
                                  }).catch(callbackError => {
                                      Telegram.WebApp.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ callback data: ' + callbackError.message);
                                  });

                            } else {
                                Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ' + adminResult.description);
                            }
                        }).catch(adminError => {
                            Telegram.WebApp.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ' + adminError.message);
                        });

                  } else {
                      Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: ' + result.description);
                  }
              })
              .catch(error => {
                  Telegram.WebApp.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
              });
        }
    });
</script>
</section>
<script type="application/javascript">
    const ShmPayApp = {
        user_id       : {{ user.id }},
        initData      : Telegram.WebApp.initData || '',
        initDataUnsafe: Telegram.WebApp.initDataUnsafe || {},
        MainButton    : Telegram.WebApp.MainButton,

        init(options) {
            document.body.style.visibility = '';
            Telegram.WebApp.ready();
            Telegram.WebApp.MainButton.setParams({
                text      : '–ó–∞–∫—Ä—ã—Ç—å',
                is_visible: true
            }).onClick(ShmPayApp.close);
            Telegram.WebApp.expand();
        },
        expand() {
            Telegram.WebApp.expand();
        },
        close() {
            Telegram.WebApp.close();
        },

        makePayment(shm_url, recurring) {
            var amount = document.getElementById('text_amount').value;
            if ( amount < 1 ) {
                Telegram.WebApp.showAlert("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ");
                return;
            };

            if ( recurring == '1' ) {
                Telegram.WebApp.MainButton.showProgress();
                document.getElementById('main_section').style.display = 'none';

                var xhr = new XMLHttpRequest();
                xhr.open('GET', shm_url + amount);
                xhr.responseType = 'json';

                xhr.onload = function() {
                    Telegram.WebApp.MainButton.hideProgress();
                    if (xhr.status === 200) {
                        Telegram.WebApp.showAlert( "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ" );
                    } else {
                        var jsonResponse = xhr.response;
                        Telegram.WebApp.showAlert( "–û—à–∏–±–∫–∞: " + ( jsonResponse.msg_ru || jsonResponse.msg ) );
                    }
                    Telegram.WebApp.close();
                }
                xhr.send();
            } else {
                Telegram.WebApp.openLink( shm_url + amount, { try_instant_view: false } );
                Telegram.WebApp.close();
            }
        },
        removePayment(shm_url) {
            Telegram.WebApp.showConfirm('–û—Ç–≤—è–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?', function(confirmed) {
                if (!confirmed) return;

                document.getElementById( shm_url ).style.display = 'none';
                var xhr = new XMLHttpRequest();
                xhr.open('DELETE', '/shm/v1/user/autopayment');
                xhr.setRequestHeader('session-id', '{{ user.user.gen_session.id }}');
                xhr.send();
            });
        },
    }
</script>

<script>
    const textAmount = document.getElementById('text_amount');
    const priceText = document.getElementById('price_text');

    // –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ text_amount
    textAmount.addEventListener('input', () => {
        const value = parseFloat(textAmount.value);
        
        if (!isNaN(value) && value > 0) {
            priceText.value = value.toFixed(0); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ input
        } else {
            priceText.value = ''; // –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ
        }
    });
</script>

<script type="application/javascript">
    document.getElementById('text_amount').value = "{{ request.params.amount || ref(pay.paysystems).0.amount }}";
document.getElementById('price_text').value = "{{ request.params.amount || ref(pay.paysystems).0.amount }}";
    ShmPayApp.init();

</script>

</body>
</html>
